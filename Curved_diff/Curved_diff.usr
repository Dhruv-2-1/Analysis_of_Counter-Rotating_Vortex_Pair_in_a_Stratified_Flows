c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      
      real x0(3)
      save x0
      data x0 /3*0/
      
c      real vort(lvt1,3), w1(lvt1), w2(lvt1) 
c      common /Vort1/ vort,w1,w2

      logical ifxyt                                                 
      integer ivout  ! flag to turn geometry on/off for VisIt/ParaView
      save    ivout
      data    ivout /0/

      integer bIDs(1), iobj_wall(1), lt

c     define objects for surface integrals
      if (istep.eq.0) then
         bIDs(1) = 1
         call create_obj(iobj_wall(1),bIDs,1)
      endif 
 
c      call estimate_strouhal

c      scale = 2.  ! Cd = F/(.5 rho U^2 ) = 2*F
c      if (mod(istep,10).eq.0) call torque_calc(scale,x0,.true.,.false.)



     

c      if (istep.gt.0 .and. mod(istep,iostep).eq.0) then
c         call comp_vort3(vort,w1,w2,vx,vy,vz)
c         ifxyt = ifxyo   ! put geometry into first vrt file
c         ifxyo = .false.
c         if (ivout.eq.0) ifxyo = .true.
c         ivout = 1

c         call outpost(vort(1,1),vy,vort(1,3),pr,t,'vrt')

c         ifxyo = ifxyt   ! restore ifxyo flag to original state

c      endif

      
!     write out probes
c      if (mod(ISTEP,10).eq.0) call hpts()

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

c     mark faces for object definition
c      nface = 2*ndim
c      do iel=1,nelt
c         do iface = 1, nface
c            if (cbc(iface,iel,1) .eq. 'W  ') then
c               boundaryID(iface,iel) = 1
c            endif
c         enddo 
c      enddo

      do iel=1,nelv
         do ifc=1,2*ndim
            id_face = BoundaryID(ifc,iel)
            if (id_face.eq.14) then        ! surface for inlet
               cbc(ifc,iel,1) = 'v  '
            elseif (id_face.eq.16) then    ! surface for outlet
               cbc(ifc,iel,1) = 'O  '
            elseif (id_face.eq.15) then    ! surface for wall
               cbc(ifc,iel,1) = 'W  '
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------


c-----------------------------------------------------------------------
